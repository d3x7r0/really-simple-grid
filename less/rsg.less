@column-count: 12;
@column-gutter: 30px;

@container-small: 750px;
@container-medium: 970px;
@container-large: 1170px;

@screen-small-min: 480px;
@screen-medium-min: 768px;
@screen-large-min: 1200px;

.container,
.row {
  box-sizing: border-box;

  // Clearfix
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: ceil(@column-gutter / 2);
  padding-right: floor(@column-gutter / 2);
}

.row {
  margin-left: -1 * floor(@column-gutter / 2);
  margin-right: -1 * ceil(@column-gutter / 2);
}

[class*='col-'] {
  float: left;
}

.generate-columns(xs);
.generate-column-offsets(xs);

@media screen and (min-width: @screen-small-min) {
  .container {
    width: @container-small;
  }

  .generate-columns(sm);
  .generate-column-offsets(sm);
}

@media screen and (min-width: @screen-medium-min) {
  .container {
    width: @container-medium;
  }

  .generate-columns(md);
  .generate-column-offsets(md);
}

@media screen and (min-width: @screen-large-min) {
  .container {
    width: @container-large;
  }

  .generate-columns(lg);
  .generate-column-offsets(lg);
}

.generate-columns(@prefix, @n: @column-count, @i: 1) when (@i =< @n) {
  .col-@{prefix}-@{i} {
    width: round(percentage(@i/@n), 2);
    min-height: 1px;
    padding-left: ceil(@column-gutter / 2);
    padding-right: floor(@column-gutter / 2);
  }

  .generate-columns(@prefix, @n, (@i + 1));
}

.generate-column-offsets(@prefix, @n: @column-count, @i: 0) when (@i < @n) {
  .col-@{prefix}-offset-@{i} when (@i = 0) {
    margin-left: 0;
  }

  .col-@{prefix}-offset-@{i} when (@i > 0) {
    margin-left: round(percentage(@i/@n), 2);
  }

  .generate-column-offsets(@prefix, @n, (@i + 1));
}
